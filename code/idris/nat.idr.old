module nat

import bool
import pair


{- We now introduce a type to represent the natural numbers using
Peano arithmetic.

In this arithmetic, there are two especially important rules
- zero is a natural number
- the successor of any natural number is a natural number

From this pair of rules arises an infinity of natural numbers. Zero is
a natural number, and the successor of any natural number is a natural
number, so the successor of zero is a natural number; and now, because
the successor of zero is a natural number, its successor, i.e., the
succesnnsor of (the successor of zero) is one too; ad infinitum! -}


{- We capture this idea with the following deceptively simple data
type definition. What it says is that nat is a type, and there are two
ways to construct a nat. One is to use the constructor, O. The other
is to apply the constructor S to a value that is already known to be
of type nat.  Because O is already known to be of type nat, you can
thus apply S to O (yielding the term (S O)) and the result is also of
type nat. And now because it is a value of type nat, you can apply S
to it to get another value of type nat. Ad infinitum. -}


-- Here's our data type definition.

||| A data type to represent the natural numbers.  We use a lower case
||| "n" in the name to distinguish our nat type from Idris's Nat type
data nat = O | S nat


{-
Here are some examples of some objects (named values) of type nat.
-}

-- zero
z: nat
z = O

-- one
o: nat
o = S O

-- two
t: nat
t = S (S O)

-- three
r: nat
r = S t

-- four
f: nat
f = S r

-- five
v: nat
v = S f

-- six
s: nat
s = S v

{-
The rest of this file contains functions operating on nats.
-}

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

x: bool
x = isZero r 

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

y: nat
y = succ O

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

{- Next we define a function that when given a natural number returns
true if it's even and false otherwise. It is very, very important to
understand this example, your first example of a recursive function -}

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n

a: bool
a = evenb O

b: bool
b = evenb (S O)

c: bool
c = evenb (S (S O))

d: bool
d = evenb r

e: bool
e = evenb f




{-The function evenb takes type nat and returns type bool.  When given

an even number (such as O or S (S O)), it returns true.  When given an

odd number (such as (S O) or r), it returns false.  The function

application expression evenb (S r) returns true.  This is because when

defining the function of evenb, the expression (S n) use used so that

the successor (S) of any natural number (n) could be obtained.  In

this case, r is definied as (S (S (S O))), or three, so (S r), or the

succesor of three, is four.  And since four is an even number, the

fucntion application expression returns true.

-}

-- Here are a few examples of how this function should work, to get
-- you going. We use ==> to mean "reduces to" or "returns"

-- addp (mkPair O O) ==> O
-- addp (mkPair O (S (S O))) ==> S (S O)
-- addp (mkPair (S O) O) ==> S O
-- addp (mkPair (S (S O)) (S (S (S O)))) ==> S (S (S (S (S O))))

-- Completing the first rule should be pretty easy. Just think about
-- the most basic properties of arithmetic. The second rule is more
-- challenging. Go back and study the evenb example. Notice how we
-- used evenb within its own definition! The idea is that we can
-- compute evenb for a big number by returning the result that we get
-- when we apply it to a number that is two less than the number that
-- we started with. You're going to use a similar idea here.

-- This is the hardest but also the most important problem in this
  -- problem set. There is *no grading penalty* for not getting an
  -- answer to this problem. There is no grading reward for getting
  -- it. Really: do *not* collaborate on this problem. It will help
  -- us instructors to see how you do.

||| given a pair of natural numbers, return its sum
addp: pair nat nat -> nat
addp (mkPair O m) = m
addp (mkPair (S n) m) = S (addp (mkPair n m))

add: nat -> nat -> nat
add O m = m
add (S n) m = S (add n m)

pf: nat -> nat
pf = add (S (S O))

||| a test, expecting O
h1: nat
h1 = addp (mkPair O O)

||| a test, expecting S (S O)
h2: nat
h2 = addp (mkPair O (S (S O)))

||| a test, expecting (S O)
h3: nat
h3 = addp (mkPair (S O) O)

||| a test, expecting (S (S (S (S (S O)))))
h4: nat
h4 = addp (mkPair (S (S O)) (S (S (S O))))

-- nat(2) Homework

-- Problem #1: Multiplication as Iterated Addition
-- (One more than n) x m = m(n+1) = mn + m
-- Wow I was stuck on this for hours until I fully wrote it out

||| given a pair of natural numbers, return its sum
multp: pair nat nat -> nat
multp (mkPair O m) = O
multp (mkPair (S n) m) = addp (mkPair (multp (mkPair m n)) m)

||| a test, expecting 3
m1: nat
m1 = multp (mkPair (S O) (S (S (S O))))

||| a test, expecting 6
m2: nat
m2 = multp (mkPair (S (S O)) (S (S (S O))))

||| a test, expecting 9
m3: nat
m3 = multp (mkPair (S (S (S O ))) (S (S (S O))))

-- Problem #2: Factorials
-- 3! = 1 x 2 x 3
-- 4! = 1  x 2 x 3 x 4

factp: nat -> nat
factp O = O
factp (S n') = multp (mkPair (S n') (factp n'))

fct1: nat
fct1 = factp (S (S (S O)))

fct2: nat
fct2 = factp (S (S (S (S O))))

||| Given a pair of natural numbers, (a, b), return a-b
||| If a <= b, the answer will O
subp: pair nat nat -> nat
subp (mkPair O m) = O
subp (mkPair n O) = n
subp (mkPair (S n) (S m)) = subp (mkPair n m)

||| Given a pair of natural numbers, (a, b), return true if a <= b otherwise return false
lep: pair nat nat -> bool
lep (mkPair O m) = true
lep (mkPair (S n) O) = false
lep (mkPair (S n) (S m)) = lep (mkPair n m)

||| Given a pair of natural numbers, (x, n), return value of x raised to nth power
exp: pair nat nat -> nat
exp (mkPair O _) = O
exp (mkPair x O) = (S O)
exp (mkPair x (S n)) = multp (mkPair (exp (mkPair x n)) x) 


||| Given a pair of natural numbers, (n, m), return true if n is equal m, otherwise return false
eqp: pair nat nat -> bool
eqp (mkPair O O) = true
eqp (mkPair (S n) O) = false
eqp (mkPair O (S m)) = false
eqp (mkPair (S n) (S m)) = eqp (mkPair  n m)


||| Given a pair of natural numbers, (n, m), return true if n is greater than m, otherwise return false
gtp: pair nat nat -> bool
gtp (mkPair (S n) O) = true
gtp (mkPair O (S m)) = false
gtp (mkPair (S n) (S m)) = not (lep (mkPair (S n) (S m)))


||| Given a pair of natural numbers, (n , m), return true of n is greater than or equal to m
gep: pair nat nat -> bool
gep (mkPair n O) = true
gep (mkPair O O) = true
gep (mkPair O (S m)) = false
gep (mkPair (S n) (S m)) = not (lep (mkPair n m))

||| Given a pair of natural numbers, (n, m), return true if n is less than m
ltp: pair nat nat -> bool
ltp (mkPair O (S m)) = true
ltp (mkPair O O) = false
ltp (mkPair n O) = false
ltp (mkPair (S n) (S m)) = ltp (mkPair n m)

fib: nat -> nat
fib O = O
fib (S O) = (S O)
fib (S (S n)) = addp (mkPair (fib (S n)) (fib n))
module nat

import bool

%default total

data nat = O | S nat

||| returns true if the argument is (represents) zero, otherwise false
isZero: nat -> bool
isZero O = true
isZero _ = false

||| returns the successor of any given nat
succ: nat -> nat
succ n = S n

||| returns the predecessor of any given nat
pred: nat -> nat
pred O = O
pred (S n) = n

||| return true if the argument is even otherwise false
evenb: nat -> bool
evenb O = true
evenb (S O) = false
evenb (S (S n)) = evenb n
