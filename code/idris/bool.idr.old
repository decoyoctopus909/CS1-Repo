-- total funtions
-- block comments
-- symbolic arguments
--pattern matching: any argument

module bool.old

import pair

data bool = true | false

||| unary functions

id_bool: bool -> bool
id_bool b = b

constFalse: bool -> bool
constFalse _ = false

constTrue: bool -> bool
constTrue _ = true

not: bool -> bool
not true = false
not _ = true

||| binary functions

andp: pair bool bool -> bool
andp (mkPair true true) = true
andp (mkPair a b) = false

orp: pair bool bool -> bool
orp (mkPair false false) = false
orp (mkPair a b) = true

nandp: pair bool bool -> bool
nandp (mkPair a b) = not (andp (mkPair a b))

xorp: pair bool bool -> bool
xorp (mkPair true false) = true
xorp (mkPair false true) = true
xorp (mkPair a b) = false

-- Exam Problem #2: There are four possible ways to fill in the result
-- column for a truth table for a binary Boolean function, and there
-- are thus exactly four such functions, and no more.

||| binary functions (bool -> bool -> bool), explicit

--Exam Problem #4a
pand: bool -> bool -> bool
pand true = id_bool
pand false = constFalse

--Exam Problem #4b
por: bool -> bool -> bool
por true = constTrue
por false = id_bool

--Exam Problem #4c
pxor: bool -> bool -> bool
pxor true = not
pxor false = id_bool

--Exam Problem #4d
pnand: bool -> bool -> bool
pnand true = not
pnand false = constTrue

||| binary functions (bool -> bool -> bool), implicit

and: bool -> bool -> bool
and true true = true
and _ _ = false

uf: bool -> bool
uf = (and true)

or: bool -> bool -> bool
or false false = false
or _ _ = true
